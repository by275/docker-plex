name: buildx

on:
  workflow_dispatch:
  schedule:
    - cron: "45 */6 * * *"
  push:
    branches:
      - 'master'

env:
  TARGET_IMAGE: ghcr.io/by275/plex
  LSIO_IMAGE: ghcr.io/linuxserver/plex

jobs:
  build-lsio:
    runs-on: ubuntu-22.04
    steps:
      - 
        name: Check if buildx required
        run: |
          if [ $GITHUB_EVENT_NAME = "schedule" ]; then
            docker pull ${{ env.LSIO_IMAGE }}:latest
            SHA256_REF=$(docker image inspect ${{ env.LSIO_IMAGE }}:latest | jq -r '.[0].RootFS.Layers | last')
            docker pull ${{ env.TARGET_IMAGE }}:lsio && \
              X_SKIP=$(docker image inspect ${{ env.TARGET_IMAGE }}:lsio | jq -c \
                --arg sha "$SHA256_REF" '.[0].RootFS.Layers | any(. == $sha)') || \
              X_SKIP=false
          else
            X_SKIP=false
          fi
          echo "X_SKIP=$X_SKIP" >> $GITHUB_ENV
      -
        name: Checkout
        if: env.X_SKIP == 'false'
        uses: actions/checkout@v3
      -
        name: Set up QEMU
        if: env.X_SKIP == 'false'
        uses: docker/setup-qemu-action@v2
      -
        name: Set up Buildx
        if: env.X_SKIP == 'false'
        uses: docker/setup-buildx-action@v2
      - 
        name: Initial Buildx
        if: env.X_SKIP == 'false'
        uses: docker/build-push-action@v4
        with:
          context: .
          file: Dockerfile
          tags: ${{ env.TARGET_IMAGE }}:testing
          platforms: linux/amd64,linux/arm/v7,linux/arm64
          build-args: |
            BASE_IMAGE=${{ env.LSIO_IMAGE }}:latest
      - 
        name: Load and Get Variables
        if: env.X_SKIP == 'false'
        run: |
          docker buildx build \
            -t ${{ env.TARGET_IMAGE }}:testing \
            --platform=linux/amd64 \
            --build-arg BASE_IMAGE=${{ env.LSIO_IMAGE }}:latest \
            --load \
            .
          CID=$(docker run -d ${{ env.TARGET_IMAGE }}:testing)
          VER=$(docker exec $CID dpkg-query --showformat='${Version}\n' --show plexmediaserver)
          docker rm -f $CID
          echo "APP_VER=$VER" >> $GITHUB_ENV
      -
        name: Login to ghcr.io
        if: env.X_SKIP == 'false'
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GHCR_PAT }}
      - 
        name: Buildx and Push
        if: env.X_SKIP == 'false'
        uses: docker/build-push-action@v4
        with:
          context: .
          file: Dockerfile
          tags: |
            ${{ env.TARGET_IMAGE }}:lsio
            ${{ env.TARGET_IMAGE }}:lsio-${{ env.APP_VER }}
          platforms: linux/amd64,linux/arm/v7,linux/arm64
          build-args: |
            BASE_IMAGE=${{ env.LSIO_IMAGE }}:latest
          push: true
      -
        name: Notification
        uses: sarisia/actions-status-discord@v1
        if: env.X_SKIP == 'false' && always()
        with:
          webhook: ${{ secrets.DISCORD_WEBHOOK }}
          status: ${{ job.status }}
          description: |
            ${{ env.TARGET_IMAGE }}:lsio
            ${{ env.TARGET_IMAGE }}:lsio-${{ env.APP_VER }}
