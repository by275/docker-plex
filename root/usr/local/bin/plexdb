#!/bin/bash

if [ $# -eq 0 ]; then
  echo "Usage: $(basename "$0") {repair,stats}"
  exit 1
fi

plexdb="/config/Library/Application Support/Plex Media Server/Plug-in Support/Databases/com.plexapp.plugins.library.db"
sqlite="/usr/lib/plexmediaserver/Plex SQLite"

if [ ! -f "$plexdb" ]; then
  echo "ERROR: Unabled to locate plex db file. Exiting..."
  exit 1
fi

function stats() {
  echo "$plexdb ($(stat -c%s "$plexdb" | numfmt --to=iec --suffix=B --format="%.2f"))"

  echo ""

  # https://github.com/animosity22/homescripts/blob/master/scripts/plex-library-stats
  query="SELECT Id, Items, Library FROM ( SELECT library_section_id AS Id, COUNT(duration) AS Items, name AS Library FROM media_items m LEFT JOIN library_sections l ON l.id = m.library_section_id WHERE library_section_id > 0 GROUP BY name );"
  "$sqlite" -readonly -header -column "$plexdb" "$query"

  echo ""

  query="SELECT count(*) FROM media_items"
  result=$("$sqlite" -readonly -header -line "$plexdb" "$query")
  echo "${result:11} files in library"

  echo ""

  query="SELECT count(*) FROM media_parts WHERE deleted_at is not null"
  result=$("$sqlite" -readonly -header -line "$plexdb" "$query")
  echo "${result:11} media_parts marked as deleted"

  query="SELECT count(*) FROM metadata_items WHERE deleted_at is not null"
  result=$("$sqlite" -readonly -header -line "$plexdb" "$query")
  echo "${result:11} metadata_items marked as deleted"

  query="SELECT count(*) FROM directories WHERE deleted_at is not null"
  result=$("$sqlite" -readonly -header -line "$plexdb" "$query")
  echo "${result:11} directories marked as deleted"

  echo ""

  query="SELECT count(*) FROM media_items where width is null"
  result=$("$sqlite" -readonly -header -line "$plexdb" "$query")
  echo "${result:11} files missing analyzation info"

  query="SELECT count(*) FROM metadata_items meta join media_items media on media.metadata_item_id = meta.id join media_parts part on part.media_item_id = media.id where part.extra_data not like '%deepAnalysisVersion=2%' and meta.metadata_type in (1, 4, 12) and part.file != '';"
  result=$("$sqlite" -readonly -header -line "$plexdb" "$query")
  echo "${result:11} files missing deep analyzation info"

  query="SELECT COUNT(0) FROM media_parts mp JOIN media_items mi ON mi.id = mp.media_item_id WHERE mi.library_section_id IN ( SELECT id FROM library_sections WHERE section_type = 2 ) AND mp.extra_data NOT LIKE '%intros=%' AND ( SELECT 1 FROM taggings WHERE taggings.metadata_item_id = mi.metadata_item_id AND taggings.text = 'intro' LIMIT 1 ) IS NULL;"
  result=$("$sqlite" -readonly -header -line "$plexdb" "$query")
  echo "${result:11} not analyzed for intros"
}

function repair() {
  if [ "$("$sqlite" "$plexdb" "PRAGMA integrity_check")" = "ok" ]; then
    read -r -p "No need to repair. Still want to proceed? [y/N] " resp </dev/tty
    if [[ ! "$resp" =~ ^([yY][eE][sS]|[yY])$ ]]; then
      exit 0
    fi
  fi
  # https://support.plex.tv/articles/repair-a-corrupted-database/
  echo "Shutting down Plex Media Server."
  s6-svc -wD -d /var/run/s6/services/plex

  dbfile="$(basename "$plexdb")"
  dbback="$dbfile-$(date +%Y-%m-%d)"
  
  cd "$(dirname "$plexdb")" && \
  echo ">> Dumping to sql" && \
  "$sqlite" "$dbfile" ".output dump.sql" ".dump" && \
  echo ">> Backing up to '$dbback'" && \
  mv "$dbfile" "$dbback" && \
  echo ">> Importing from sql" && \
  "$sqlite" "$dbfile" ".read dump.sql" && \
  echo "   Successful!" || \
  { echo "   Something went wrong! Restoring..." && mv "$dbback" "$dbfile"; }
  echo ">> Cleaning up" && \
  rm -f \
    dump.sql \
    ${dbfile}-shm \
    ${dbfile}-wal

  plexuser=$(if getent passwd plex > /dev/null; then echo "plex"; else echo "abc"; fi)
  find "$(dirname "$plexdb")" \! \( -uid $(id -u $plexuser) -gid $(id -g $plexuser) \) -print0 | \
    xargs -0 --no-run-if-empty chown -h $plexuser:$plexuser
  echo "Starting Plex Media Server."
  s6-svc -wu -u /var/run/s6/services/plex
}

# 
# main
# 
if [ "$1" = "repair" ]; then
  repair
elif [ "$1" = "stats" ]; then
  stats
else
  echo "ERROR: Unknown command: $@"
  echo "Usage: $(basename "$0") {repair,stats}"
  exit 1
fi
